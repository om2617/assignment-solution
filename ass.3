import os
from Crypto.Cipher import AES, PKCS1_OAEP
from Crypto.Util.Padding import pad, unpad
from Crypto.Random import get_random_bytes
from Crypto.PublicKey import RSA

def divide_file(file_path, chunk_size=1024*1024):
    """Divide a file into chunks."""
    file_chunks = []
    with open(file_path, 'rb') as f:
        chunk = f.read(chunk_size)
        while chunk:
            file_chunks.append(chunk)
            chunk = f.read(chunk_size)
    return file_chunks

def aes_encrypt(chunk):
    """Encrypt a chunk using AES."""
    key = get_random_bytes(32)  # 256-bit AES key
    cipher = AES.new(key, AES.MODE_CBC)
    ct_bytes = cipher.encrypt(pad(chunk, AES.block_size))
    return cipher.iv, key, ct_bytes

def rsa_encrypt(key, public_key):
    """Encrypt AES key with RSA."""
    rsa_cipher = PKCS1_OAEP.new(RSA.import_key(public_key))
    return rsa_cipher.encrypt(key)

def rsa_decrypt(encrypted_key, private_key):
    """Decrypt AES key with RSA."""
    rsa_cipher = PKCS1_OAEP.new(RSA.import_key(private_key))
    return rsa_cipher.decrypt(encrypted_key)

def aes_decrypt(iv, key, ct_bytes):
    """Decrypt a chunk using AES."""
    cipher = AES.new(key, AES.MODE_CBC, iv)
    pt = unpad(cipher.decrypt(ct_bytes), AES.block_size)
    return pt

# Paths
input_file = 'large_file.txt'
output_file = 'reassembled_file.txt'

# Divide file
file_chunks = divide_file(input_file)

# Encrypt chunks
encrypted_chunks = [aes_encrypt(chunk) for chunk in file_chunks]

# Generate RSA key pair
rsa_key = RSA.generate(2048)
private_key = rsa_key.export_key()
public_key = rsa_key.publickey().export_key()

# Encrypt AES keys with RSA
encrypted_keys = [rsa_encrypt(key, public_key) for _, key, _ in encrypted_chunks]

# Decrypt chunks
decrypted_chunks = []
for (iv, _, ct_bytes), enc_key in zip(encrypted_chunks, encrypted_keys):
    aes_key = rsa_decrypt(enc_key, private_key)
    decrypted_chunk = aes_decrypt(iv, aes_key, ct_bytes)
    decrypted_chunks.append(decrypted_chunk)

# Reassemble file
with open(output_file, 'wb') as f:
    for chunk in decrypted_chunks:
        f.write(chunk)

print("File reassembled successfully.")
